
Mini_Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000282e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  0000282e  000028c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001b0  008001b0  00002a12  2**0
                  ALLOC
  3 .stab         000022b0  00000000  00000000  00002a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001326  00000000  00000000  00004cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  000061aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  000063be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  000089d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  00009e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b1ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000b693  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c0ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 10 	call	0x20ee	; 0x20ee <main>
      8a:	0c 94 15 14 	jmp	0x282a	; 0x282a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ea       	ldi	r26, 0xA8	; 168
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 13 	jmp	0x2732	; 0x2732 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ea       	ldi	r24, 0xA8	; 168
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	68 ea       	ldi	r22, 0xA8	; 168
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c1 13 	jmp	0x2782	; 0x2782 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a2 13 	jmp	0x2744	; 0x2744 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 be 13 	jmp	0x277c	; 0x277c <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 a9 13 	jmp	0x2752	; 0x2752 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 bd 13 	jmp	0x277a	; 0x277a <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e0 55       	subi	r30, 0x50	; 80
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType* adc_config_struct)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <ADC_init+0x6>
     ef0:	cd b7       	in	r28, 0x3d	; 61
     ef2:	de b7       	in	r29, 0x3e	; 62
     ef4:	9a 83       	std	Y+2, r25	; 0x02
     ef6:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 11 to choose to use internal 2.56V Voltage Reference with external capacitor at AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00010 to choose channel 2 as initialization
	 */
	ADMUX = ((adc_config_struct->ref_volt) << REFS0) | (DISABLE << ADLAR);
     ef8:	a7 e2       	ldi	r26, 0x27	; 39
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e9 81       	ldd	r30, Y+1	; 0x01
     efe:	fa 81       	ldd	r31, Y+2	; 0x02
     f00:	80 81       	ld	r24, Z
     f02:	82 95       	swap	r24
     f04:	88 0f       	add	r24, r24
     f06:	88 0f       	add	r24, r24
     f08:	80 7c       	andi	r24, 0xC0	; 192
     f0a:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (ENABLE << ADEN) | (adc_config_struct->prescaler);
     f0c:	a6 e2       	ldi	r26, 0x26	; 38
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e9 81       	ldd	r30, Y+1	; 0x01
     f12:	fa 81       	ldd	r31, Y+2	; 0x02
     f14:	81 81       	ldd	r24, Z+1	; 0x01
     f16:	80 68       	ori	r24, 0x80	; 128
     f18:	8c 93       	st	X, r24
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	87 70       	andi	r24, 0x07	; 7
     f34:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     f36:	a7 e2       	ldi	r26, 0x27	; 39
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e7 e2       	ldi	r30, 0x27	; 39
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 7e       	andi	r24, 0xE0	; 224
     f42:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     f44:	a7 e2       	ldi	r26, 0x27	; 39
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e2       	ldi	r30, 0x27	; 39
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	90 81       	ld	r25, Z
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	89 2b       	or	r24, r25
     f52:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     f54:	a6 e2       	ldi	r26, 0x26	; 38
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e6 e2       	ldi	r30, 0x26	; 38
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     f62:	e6 e2       	ldi	r30, 0x26	; 38
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	80 71       	andi	r24, 0x10	; 16
     f6e:	90 70       	andi	r25, 0x00	; 0
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	b9 f3       	breq	.-18     	; 0xf62 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     f74:	a6 e2       	ldi	r26, 0x26	; 38
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e6 e2       	ldi	r30, 0x26	; 38
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 61       	ori	r24, 0x10	; 16
     f80:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     f82:	e4 e2       	ldi	r30, 0x24	; 36
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
}
     f8a:	0f 90       	pop	r0
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	00 d0       	rcall	.+0      	; 0xf98 <GPIO_setupPinDirection+0x6>
     f98:	00 d0       	rcall	.+0      	; 0xf9a <GPIO_setupPinDirection+0x8>
     f9a:	0f 92       	push	r0
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	6a 83       	std	Y+2, r22	; 0x02
     fa4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	88 30       	cpi	r24, 0x08	; 8
     faa:	08 f0       	brcs	.+2      	; 0xfae <GPIO_setupPinDirection+0x1c>
     fac:	d5 c0       	rjmp	.+426    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <GPIO_setupPinDirection+0x24>
     fb4:	d1 c0       	rjmp	.+418    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <GPIO_setupPinDirection+0x3a>
     fca:	43 c0       	rjmp	.+134    	; 0x1052 <GPIO_setupPinDirection+0xc0>
     fcc:	2c 81       	ldd	r18, Y+4	; 0x04
     fce:	3d 81       	ldd	r19, Y+5	; 0x05
     fd0:	22 30       	cpi	r18, 0x02	; 2
     fd2:	31 05       	cpc	r19, r1
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <GPIO_setupPinDirection+0x4e>
     fd6:	8c 81       	ldd	r24, Y+4	; 0x04
     fd8:	9d 81       	ldd	r25, Y+5	; 0x05
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	71 f0       	breq	.+28     	; 0xffa <GPIO_setupPinDirection+0x68>
     fde:	bc c0       	rjmp	.+376    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	3d 81       	ldd	r19, Y+5	; 0x05
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	09 f4       	brne	.+2      	; 0xfec <GPIO_setupPinDirection+0x5a>
     fea:	5f c0       	rjmp	.+190    	; 0x10aa <GPIO_setupPinDirection+0x118>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	9d 81       	ldd	r25, Y+5	; 0x05
     ff0:	83 30       	cpi	r24, 0x03	; 3
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <GPIO_setupPinDirection+0x66>
     ff6:	85 c0       	rjmp	.+266    	; 0x1102 <GPIO_setupPinDirection+0x170>
     ff8:	af c0       	rjmp	.+350    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	a1 f4       	brne	.+40     	; 0x1028 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1000:	aa e3       	ldi	r26, 0x3A	; 58
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_setupPinDirection+0x8c>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_setupPinDirection+0x88>
    1022:	84 2b       	or	r24, r20
    1024:	8c 93       	st	X, r24
    1026:	98 c0       	rjmp	.+304    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1028:	aa e3       	ldi	r26, 0x3A	; 58
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e3       	ldi	r30, 0x3A	; 58
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8a 81       	ldd	r24, Y+2	; 0x02
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <GPIO_setupPinDirection+0xb4>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <GPIO_setupPinDirection+0xb0>
    104a:	80 95       	com	r24
    104c:	84 23       	and	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	83 c0       	rjmp	.+262    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	a1 f4       	brne	.+40     	; 0x1080 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1058:	a7 e3       	ldi	r26, 0x37	; 55
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e7 e3       	ldi	r30, 0x37	; 55
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_setupPinDirection+0xe4>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_setupPinDirection+0xe0>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	6c c0       	rjmp	.+216    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1080:	a7 e3       	ldi	r26, 0x37	; 55
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e7 e3       	ldi	r30, 0x37	; 55
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <GPIO_setupPinDirection+0x10c>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <GPIO_setupPinDirection+0x108>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	57 c0       	rjmp	.+174    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	81 30       	cpi	r24, 0x01	; 1
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <GPIO_setupPinDirection+0x13c>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <GPIO_setupPinDirection+0x138>
    10d2:	84 2b       	or	r24, r20
    10d4:	8c 93       	st	X, r24
    10d6:	40 c0       	rjmp	.+128    	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10d8:	a4 e3       	ldi	r26, 0x34	; 52
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e4 e3       	ldi	r30, 0x34	; 52
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	8a 81       	ldd	r24, Y+2	; 0x02
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 2e       	mov	r0, r18
    10f0:	02 c0       	rjmp	.+4      	; 0x10f6 <GPIO_setupPinDirection+0x164>
    10f2:	88 0f       	add	r24, r24
    10f4:	99 1f       	adc	r25, r25
    10f6:	0a 94       	dec	r0
    10f8:	e2 f7       	brpl	.-8      	; 0x10f2 <GPIO_setupPinDirection+0x160>
    10fa:	80 95       	com	r24
    10fc:	84 23       	and	r24, r20
    10fe:	8c 93       	st	X, r24
    1100:	2b c0       	rjmp	.+86     	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	81 30       	cpi	r24, 0x01	; 1
    1106:	a1 f4       	brne	.+40     	; 0x1130 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1108:	a1 e3       	ldi	r26, 0x31	; 49
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <GPIO_setupPinDirection+0x194>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <GPIO_setupPinDirection+0x190>
    112a:	84 2b       	or	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	14 c0       	rjmp	.+40     	; 0x1158 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1130:	a1 e3       	ldi	r26, 0x31	; 49
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e1 e3       	ldi	r30, 0x31	; 49
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <GPIO_setupPinDirection+0x1bc>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <GPIO_setupPinDirection+0x1b8>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <GPIO_writePin+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <GPIO_writePin+0x8>
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	6a 83       	std	Y+2, r22	; 0x02
    117a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 30       	cpi	r24, 0x08	; 8
    1180:	08 f0       	brcs	.+2      	; 0x1184 <GPIO_writePin+0x1c>
    1182:	d5 c0       	rjmp	.+426    	; 0x132e <GPIO_writePin+0x1c6>
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	08 f0       	brcs	.+2      	; 0x118c <GPIO_writePin+0x24>
    118a:	d1 c0       	rjmp	.+418    	; 0x132e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3d 83       	std	Y+5, r19	; 0x05
    1194:	2c 83       	std	Y+4, r18	; 0x04
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <GPIO_writePin+0x3a>
    11a0:	43 c0       	rjmp	.+134    	; 0x1228 <GPIO_writePin+0xc0>
    11a2:	2c 81       	ldd	r18, Y+4	; 0x04
    11a4:	3d 81       	ldd	r19, Y+5	; 0x05
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <GPIO_writePin+0x4e>
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	9d 81       	ldd	r25, Y+5	; 0x05
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <GPIO_writePin+0x68>
    11b4:	bc c0       	rjmp	.+376    	; 0x132e <GPIO_writePin+0x1c6>
    11b6:	2c 81       	ldd	r18, Y+4	; 0x04
    11b8:	3d 81       	ldd	r19, Y+5	; 0x05
    11ba:	22 30       	cpi	r18, 0x02	; 2
    11bc:	31 05       	cpc	r19, r1
    11be:	09 f4       	brne	.+2      	; 0x11c2 <GPIO_writePin+0x5a>
    11c0:	5f c0       	rjmp	.+190    	; 0x1280 <GPIO_writePin+0x118>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	91 05       	cpc	r25, r1
    11ca:	09 f4       	brne	.+2      	; 0x11ce <GPIO_writePin+0x66>
    11cc:	85 c0       	rjmp	.+266    	; 0x12d8 <GPIO_writePin+0x170>
    11ce:	af c0       	rjmp	.+350    	; 0x132e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	a1 f4       	brne	.+40     	; 0x11fe <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11d6:	ab e3       	ldi	r26, 0x3B	; 59
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	eb e3       	ldi	r30, 0x3B	; 59
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8a 81       	ldd	r24, Y+2	; 0x02
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <GPIO_writePin+0x8c>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <GPIO_writePin+0x88>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	98 c0       	rjmp	.+304    	; 0x132e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11fe:	ab e3       	ldi	r26, 0x3B	; 59
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_writePin+0xb4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_writePin+0xb0>
    1220:	80 95       	com	r24
    1222:	84 23       	and	r24, r20
    1224:	8c 93       	st	X, r24
    1226:	83 c0       	rjmp	.+262    	; 0x132e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a1 f4       	brne	.+40     	; 0x1256 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    122e:	a8 e3       	ldi	r26, 0x38	; 56
    1230:	b0 e0       	ldi	r27, 0x00	; 0
    1232:	e8 e3       	ldi	r30, 0x38	; 56
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	48 2f       	mov	r20, r24
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	02 2e       	mov	r0, r18
    1246:	02 c0       	rjmp	.+4      	; 0x124c <GPIO_writePin+0xe4>
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	0a 94       	dec	r0
    124e:	e2 f7       	brpl	.-8      	; 0x1248 <GPIO_writePin+0xe0>
    1250:	84 2b       	or	r24, r20
    1252:	8c 93       	st	X, r24
    1254:	6c c0       	rjmp	.+216    	; 0x132e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1256:	a8 e3       	ldi	r26, 0x38	; 56
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e8 e3       	ldi	r30, 0x38	; 56
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_writePin+0x10c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_writePin+0x108>
    1278:	80 95       	com	r24
    127a:	84 23       	and	r24, r20
    127c:	8c 93       	st	X, r24
    127e:	57 c0       	rjmp	.+174    	; 0x132e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	a1 f4       	brne	.+40     	; 0x12ae <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1286:	a5 e3       	ldi	r26, 0x35	; 53
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e5 e3       	ldi	r30, 0x35	; 53
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	48 2f       	mov	r20, r24
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	02 2e       	mov	r0, r18
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <GPIO_writePin+0x13c>
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	0a 94       	dec	r0
    12a6:	e2 f7       	brpl	.-8      	; 0x12a0 <GPIO_writePin+0x138>
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	40 c0       	rjmp	.+128    	; 0x132e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12ae:	a5 e3       	ldi	r26, 0x35	; 53
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e5 e3       	ldi	r30, 0x35	; 53
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_writePin+0x164>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_writePin+0x160>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	2b c0       	rjmp	.+86     	; 0x132e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	a1 f4       	brne	.+40     	; 0x1306 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_writePin+0x194>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_writePin+0x190>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	14 c0       	rjmp	.+40     	; 0x132e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1306:	a2 e3       	ldi	r26, 0x32	; 50
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e2 e3       	ldi	r30, 0x32	; 50
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <GPIO_writePin+0x1bc>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <GPIO_writePin+0x1b8>
    1328:	80 95       	com	r24
    132a:	84 23       	and	r24, r20
    132c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	cf 91       	pop	r28
    133a:	df 91       	pop	r29
    133c:	08 95       	ret

0000133e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <GPIO_readPin+0x6>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <GPIO_readPin+0x8>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1350:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	88 30       	cpi	r24, 0x08	; 8
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_readPin+0x1c>
    1358:	84 c0       	rjmp	.+264    	; 0x1462 <GPIO_readPin+0x124>
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	84 30       	cpi	r24, 0x04	; 4
    135e:	08 f0       	brcs	.+2      	; 0x1362 <GPIO_readPin+0x24>
    1360:	80 c0       	rjmp	.+256    	; 0x1462 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	3d 83       	std	Y+5, r19	; 0x05
    136a:	2c 83       	std	Y+4, r18	; 0x04
    136c:	4c 81       	ldd	r20, Y+4	; 0x04
    136e:	5d 81       	ldd	r21, Y+5	; 0x05
    1370:	41 30       	cpi	r20, 0x01	; 1
    1372:	51 05       	cpc	r21, r1
    1374:	79 f1       	breq	.+94     	; 0x13d4 <GPIO_readPin+0x96>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	91 05       	cpc	r25, r1
    137e:	34 f4       	brge	.+12     	; 0x138c <GPIO_readPin+0x4e>
    1380:	2c 81       	ldd	r18, Y+4	; 0x04
    1382:	3d 81       	ldd	r19, Y+5	; 0x05
    1384:	21 15       	cp	r18, r1
    1386:	31 05       	cpc	r19, r1
    1388:	69 f0       	breq	.+26     	; 0x13a4 <GPIO_readPin+0x66>
    138a:	6b c0       	rjmp	.+214    	; 0x1462 <GPIO_readPin+0x124>
    138c:	4c 81       	ldd	r20, Y+4	; 0x04
    138e:	5d 81       	ldd	r21, Y+5	; 0x05
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	51 05       	cpc	r21, r1
    1394:	b9 f1       	breq	.+110    	; 0x1404 <GPIO_readPin+0xc6>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	83 30       	cpi	r24, 0x03	; 3
    139c:	91 05       	cpc	r25, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <GPIO_readPin+0x64>
    13a0:	49 c0       	rjmp	.+146    	; 0x1434 <GPIO_readPin+0xf6>
    13a2:	5f c0       	rjmp	.+190    	; 0x1462 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13a4:	e9 e3       	ldi	r30, 0x39	; 57
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a9 01       	movw	r20, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_readPin+0x7e>
    13b8:	55 95       	asr	r21
    13ba:	47 95       	ror	r20
    13bc:	8a 95       	dec	r24
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_readPin+0x7a>
    13c0:	ca 01       	movw	r24, r20
    13c2:	81 70       	andi	r24, 0x01	; 1
    13c4:	90 70       	andi	r25, 0x00	; 0
    13c6:	88 23       	and	r24, r24
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	49 c0       	rjmp	.+146    	; 0x1462 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	47 c0       	rjmp	.+142    	; 0x1462 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13d4:	e6 e3       	ldi	r30, 0x36	; 54
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_readPin+0xae>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_readPin+0xaa>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	90 70       	andi	r25, 0x00	; 0
    13f6:	88 23       	and	r24, r24
    13f8:	19 f0       	breq	.+6      	; 0x1400 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	31 c0       	rjmp	.+98     	; 0x1462 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	2f c0       	rjmp	.+94     	; 0x1462 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1404:	e3 e3       	ldi	r30, 0x33	; 51
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	88 2f       	mov	r24, r24
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	a9 01       	movw	r20, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <GPIO_readPin+0xde>
    1418:	55 95       	asr	r21
    141a:	47 95       	ror	r20
    141c:	8a 95       	dec	r24
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <GPIO_readPin+0xda>
    1420:	ca 01       	movw	r24, r20
    1422:	81 70       	andi	r24, 0x01	; 1
    1424:	90 70       	andi	r25, 0x00	; 0
    1426:	88 23       	and	r24, r24
    1428:	19 f0       	breq	.+6      	; 0x1430 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	19 c0       	rjmp	.+50     	; 0x1462 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1430:	19 82       	std	Y+1, r1	; 0x01
    1432:	17 c0       	rjmp	.+46     	; 0x1462 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1434:	e0 e3       	ldi	r30, 0x30	; 48
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	88 2f       	mov	r24, r24
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a9 01       	movw	r20, r18
    1446:	02 c0       	rjmp	.+4      	; 0x144c <GPIO_readPin+0x10e>
    1448:	55 95       	asr	r21
    144a:	47 95       	ror	r20
    144c:	8a 95       	dec	r24
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <GPIO_readPin+0x10a>
    1450:	ca 01       	movw	r24, r20
    1452:	81 70       	andi	r24, 0x01	; 1
    1454:	90 70       	andi	r25, 0x00	; 0
    1456:	88 23       	and	r24, r24
    1458:	19 f0       	breq	.+6      	; 0x1460 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1460:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1462:	89 81       	ldd	r24, Y+1	; 0x01
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <GPIO_setupPortDirection+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <GPIO_setupPortDirection+0x8>
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	90 f5       	brcc	.+100    	; 0x14ee <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3c 83       	std	Y+4, r19	; 0x04
    1492:	2b 83       	std	Y+3, r18	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	91 05       	cpc	r25, r1
    149c:	d1 f0       	breq	.+52     	; 0x14d2 <GPIO_setupPortDirection+0x5e>
    149e:	2b 81       	ldd	r18, Y+3	; 0x03
    14a0:	3c 81       	ldd	r19, Y+4	; 0x04
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <GPIO_setupPortDirection+0x3e>
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	00 97       	sbiw	r24, 0x00	; 0
    14ae:	61 f0       	breq	.+24     	; 0x14c8 <GPIO_setupPortDirection+0x54>
    14b0:	1e c0       	rjmp	.+60     	; 0x14ee <GPIO_setupPortDirection+0x7a>
    14b2:	2b 81       	ldd	r18, Y+3	; 0x03
    14b4:	3c 81       	ldd	r19, Y+4	; 0x04
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	81 f0       	breq	.+32     	; 0x14dc <GPIO_setupPortDirection+0x68>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	83 30       	cpi	r24, 0x03	; 3
    14c2:	91 05       	cpc	r25, r1
    14c4:	81 f0       	breq	.+32     	; 0x14e6 <GPIO_setupPortDirection+0x72>
    14c6:	13 c0       	rjmp	.+38     	; 0x14ee <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	0e c0       	rjmp	.+28     	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14d2:	e7 e3       	ldi	r30, 0x37	; 55
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
    14da:	09 c0       	rjmp	.+18     	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14dc:	e4 e3       	ldi	r30, 0x34	; 52
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	80 83       	st	Z, r24
    14e4:	04 c0       	rjmp	.+8      	; 0x14ee <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14e6:	e1 e3       	ldi	r30, 0x31	; 49
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
			break;
		}
	}
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	cf 91       	pop	r28
    14f8:	df 91       	pop	r29
    14fa:	08 95       	ret

000014fc <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <GPIO_writePort+0x6>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <GPIO_writePort+0x8>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	89 83       	std	Y+1, r24	; 0x01
    150a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    150c:	89 81       	ldd	r24, Y+1	; 0x01
    150e:	84 30       	cpi	r24, 0x04	; 4
    1510:	90 f5       	brcc	.+100    	; 0x1576 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3c 83       	std	Y+4, r19	; 0x04
    151a:	2b 83       	std	Y+3, r18	; 0x03
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	91 05       	cpc	r25, r1
    1524:	d1 f0       	breq	.+52     	; 0x155a <GPIO_writePort+0x5e>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	2c f4       	brge	.+10     	; 0x153a <GPIO_writePort+0x3e>
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	61 f0       	breq	.+24     	; 0x1550 <GPIO_writePort+0x54>
    1538:	1e c0       	rjmp	.+60     	; 0x1576 <GPIO_writePort+0x7a>
    153a:	2b 81       	ldd	r18, Y+3	; 0x03
    153c:	3c 81       	ldd	r19, Y+4	; 0x04
    153e:	22 30       	cpi	r18, 0x02	; 2
    1540:	31 05       	cpc	r19, r1
    1542:	81 f0       	breq	.+32     	; 0x1564 <GPIO_writePort+0x68>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	91 05       	cpc	r25, r1
    154c:	81 f0       	breq	.+32     	; 0x156e <GPIO_writePort+0x72>
    154e:	13 c0       	rjmp	.+38     	; 0x1576 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1550:	eb e3       	ldi	r30, 0x3B	; 59
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	80 83       	st	Z, r24
    1558:	0e c0       	rjmp	.+28     	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    155a:	e8 e3       	ldi	r30, 0x38	; 56
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	80 83       	st	Z, r24
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1564:	e5 e3       	ldi	r30, 0x35	; 53
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	80 83       	st	Z, r24
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
			break;
		}
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <GPIO_readPort+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_readPort+0x8>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1592:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	84 30       	cpi	r24, 0x04	; 4
    1598:	90 f5       	brcc	.+100    	; 0x15fe <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3c 83       	std	Y+4, r19	; 0x04
    15a2:	2b 83       	std	Y+3, r18	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	d1 f0       	breq	.+52     	; 0x15e2 <GPIO_readPort+0x5e>
    15ae:	2b 81       	ldd	r18, Y+3	; 0x03
    15b0:	3c 81       	ldd	r19, Y+4	; 0x04
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <GPIO_readPort+0x3e>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	61 f0       	breq	.+24     	; 0x15d8 <GPIO_readPort+0x54>
    15c0:	1e c0       	rjmp	.+60     	; 0x15fe <GPIO_readPort+0x7a>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	81 f0       	breq	.+32     	; 0x15ec <GPIO_readPort+0x68>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	81 f0       	breq	.+32     	; 0x15f6 <GPIO_readPort+0x72>
    15d6:	13 c0       	rjmp	.+38     	; 0x15fe <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15d8:	e9 e3       	ldi	r30, 0x39	; 57
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	0e c0       	rjmp	.+28     	; 0x15fe <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    15e2:	e6 e3       	ldi	r30, 0x36	; 54
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	89 83       	std	Y+1, r24	; 0x01
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15ec:	e3 e3       	ldi	r30, 0x33	; 51
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	04 c0       	rjmp	.+8      	; 0x15fe <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15f6:	e0 e3       	ldi	r30, 0x30	; 48
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	2e 97       	sbiw	r28, 0x0e	; 14
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	62 e0       	ldi	r22, 0x02	; 2
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 ea       	ldi	r26, 0xA0	; 160
    163c:	b1 e4       	ldi	r27, 0x41	; 65
    163e:	8b 87       	std	Y+11, r24	; 0x0b
    1640:	9c 87       	std	Y+12, r25	; 0x0c
    1642:	ad 87       	std	Y+13, r26	; 0x0d
    1644:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1646:	6b 85       	ldd	r22, Y+11	; 0x0b
    1648:	7c 85       	ldd	r23, Y+12	; 0x0c
    164a:	8d 85       	ldd	r24, Y+13	; 0x0d
    164c:	9e 85       	ldd	r25, Y+14	; 0x0e
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	4a e7       	ldi	r20, 0x7A	; 122
    1654:	53 e4       	ldi	r21, 0x43	; 67
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	8f 83       	std	Y+7, r24	; 0x07
    1660:	98 87       	std	Y+8, r25	; 0x08
    1662:	a9 87       	std	Y+9, r26	; 0x09
    1664:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1666:	6f 81       	ldd	r22, Y+7	; 0x07
    1668:	78 85       	ldd	r23, Y+8	; 0x08
    166a:	89 85       	ldd	r24, Y+9	; 0x09
    166c:	9a 85       	ldd	r25, Y+10	; 0x0a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e8       	ldi	r20, 0x80	; 128
    1674:	5f e3       	ldi	r21, 0x3F	; 63
    1676:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167a:	88 23       	and	r24, r24
    167c:	2c f4       	brge	.+10     	; 0x1688 <LCD_init+0x7a>
		__ticks = 1;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	9e 83       	std	Y+6, r25	; 0x06
    1684:	8d 83       	std	Y+5, r24	; 0x05
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	3f ef       	ldi	r19, 0xFF	; 255
    1694:	4f e7       	ldi	r20, 0x7F	; 127
    1696:	57 e4       	ldi	r21, 0x47	; 71
    1698:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    169c:	18 16       	cp	r1, r24
    169e:	4c f5       	brge	.+82     	; 0x16f2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	40 e2       	ldi	r20, 0x20	; 32
    16ae:	51 e4       	ldi	r21, 0x41	; 65
    16b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	9e 83       	std	Y+6, r25	; 0x06
    16c6:	8d 83       	std	Y+5, r24	; 0x05
    16c8:	0f c0       	rjmp	.+30     	; 0x16e8 <LCD_init+0xda>
    16ca:	89 e1       	ldi	r24, 0x19	; 25
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	9c 83       	std	Y+4, r25	; 0x04
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	9c 81       	ldd	r25, Y+4	; 0x04
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	f1 f7       	brne	.-4      	; 0x16d6 <LCD_init+0xc8>
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	9e 83       	std	Y+6, r25	; 0x06
    16e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	9e 81       	ldd	r25, Y+6	; 0x06
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	69 f7       	brne	.-38     	; 0x16ca <LCD_init+0xbc>
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	8d 81       	ldd	r24, Y+5	; 0x05
    1708:	9e 81       	ldd	r25, Y+6	; 0x06
    170a:	9a 83       	std	Y+2, r25	; 0x02
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_init+0x104>
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    171a:	82 e0       	ldi	r24, 0x02	; 2
    171c:	6f ef       	ldi	r22, 0xFF	; 255
    171e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1722:	88 e3       	ldi	r24, 0x38	; 56
    1724:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1728:	8c e0       	ldi	r24, 0x0C	; 12
    172a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_sendCommand>
}
    1734:	2e 96       	adiw	r28, 0x0e	; 14
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	e9 97       	sbiw	r28, 0x39	; 57
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a0 e8       	ldi	r26, 0x80	; 128
    176c:	bf e3       	ldi	r27, 0x3F	; 63
    176e:	8d ab       	std	Y+53, r24	; 0x35
    1770:	9e ab       	std	Y+54, r25	; 0x36
    1772:	af ab       	std	Y+55, r26	; 0x37
    1774:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1776:	6d a9       	ldd	r22, Y+53	; 0x35
    1778:	7e a9       	ldd	r23, Y+54	; 0x36
    177a:	8f a9       	ldd	r24, Y+55	; 0x37
    177c:	98 ad       	ldd	r25, Y+56	; 0x38
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	4a e7       	ldi	r20, 0x7A	; 122
    1784:	53 e4       	ldi	r21, 0x43	; 67
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	89 ab       	std	Y+49, r24	; 0x31
    1790:	9a ab       	std	Y+50, r25	; 0x32
    1792:	ab ab       	std	Y+51, r26	; 0x33
    1794:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1796:	69 a9       	ldd	r22, Y+49	; 0x31
    1798:	7a a9       	ldd	r23, Y+50	; 0x32
    179a:	8b a9       	ldd	r24, Y+51	; 0x33
    179c:	9c a9       	ldd	r25, Y+52	; 0x34
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	2c f4       	brge	.+10     	; 0x17b8 <LCD_sendCommand+0x72>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	98 ab       	std	Y+48, r25	; 0x30
    17b4:	8f a7       	std	Y+47, r24	; 0x2f
    17b6:	3f c0       	rjmp	.+126    	; 0x1836 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    17b8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ba:	7a a9       	ldd	r23, Y+50	; 0x32
    17bc:	8b a9       	ldd	r24, Y+51	; 0x33
    17be:	9c a9       	ldd	r25, Y+52	; 0x34
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3f ef       	ldi	r19, 0xFF	; 255
    17c4:	4f e7       	ldi	r20, 0x7F	; 127
    17c6:	57 e4       	ldi	r21, 0x47	; 71
    17c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17cc:	18 16       	cp	r1, r24
    17ce:	4c f5       	brge	.+82     	; 0x1822 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d0:	6d a9       	ldd	r22, Y+53	; 0x35
    17d2:	7e a9       	ldd	r23, Y+54	; 0x36
    17d4:	8f a9       	ldd	r24, Y+55	; 0x37
    17d6:	98 ad       	ldd	r25, Y+56	; 0x38
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	40 e2       	ldi	r20, 0x20	; 32
    17de:	51 e4       	ldi	r21, 0x41	; 65
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	bc 01       	movw	r22, r24
    17ea:	cd 01       	movw	r24, r26
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <LCD_sendCommand+0xd2>
    17fa:	89 e1       	ldi	r24, 0x19	; 25
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9e a7       	std	Y+46, r25	; 0x2e
    1800:	8d a7       	std	Y+45, r24	; 0x2d
    1802:	8d a5       	ldd	r24, Y+45	; 0x2d
    1804:	9e a5       	ldd	r25, Y+46	; 0x2e
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_sendCommand+0xc0>
    180a:	9e a7       	std	Y+46, r25	; 0x2e
    180c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1810:	98 a9       	ldd	r25, Y+48	; 0x30
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	98 ab       	std	Y+48, r25	; 0x30
    1816:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1818:	8f a5       	ldd	r24, Y+47	; 0x2f
    181a:	98 a9       	ldd	r25, Y+48	; 0x30
    181c:	00 97       	sbiw	r24, 0x00	; 0
    181e:	69 f7       	brne	.-38     	; 0x17fa <LCD_sendCommand+0xb4>
    1820:	14 c0       	rjmp	.+40     	; 0x184a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1822:	69 a9       	ldd	r22, Y+49	; 0x31
    1824:	7a a9       	ldd	r23, Y+50	; 0x32
    1826:	8b a9       	ldd	r24, Y+51	; 0x33
    1828:	9c a9       	ldd	r25, Y+52	; 0x34
    182a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182e:	dc 01       	movw	r26, r24
    1830:	cb 01       	movw	r24, r22
    1832:	98 ab       	std	Y+48, r25	; 0x30
    1834:	8f a7       	std	Y+47, r24	; 0x2f
    1836:	8f a5       	ldd	r24, Y+47	; 0x2f
    1838:	98 a9       	ldd	r25, Y+48	; 0x30
    183a:	9c a7       	std	Y+44, r25	; 0x2c
    183c:	8b a7       	std	Y+43, r24	; 0x2b
    183e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1840:	9c a5       	ldd	r25, Y+44	; 0x2c
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <LCD_sendCommand+0xfc>
    1846:	9c a7       	std	Y+44, r25	; 0x2c
    1848:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	62 e0       	ldi	r22, 0x02	; 2
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e8       	ldi	r26, 0x80	; 128
    185a:	bf e3       	ldi	r27, 0x3F	; 63
    185c:	8f a3       	std	Y+39, r24	; 0x27
    185e:	98 a7       	std	Y+40, r25	; 0x28
    1860:	a9 a7       	std	Y+41, r26	; 0x29
    1862:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1864:	6f a1       	ldd	r22, Y+39	; 0x27
    1866:	78 a5       	ldd	r23, Y+40	; 0x28
    1868:	89 a5       	ldd	r24, Y+41	; 0x29
    186a:	9a a5       	ldd	r25, Y+42	; 0x2a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	53 e4       	ldi	r21, 0x43	; 67
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8b a3       	std	Y+35, r24	; 0x23
    187e:	9c a3       	std	Y+36, r25	; 0x24
    1880:	ad a3       	std	Y+37, r26	; 0x25
    1882:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1884:	6b a1       	ldd	r22, Y+35	; 0x23
    1886:	7c a1       	ldd	r23, Y+36	; 0x24
    1888:	8d a1       	ldd	r24, Y+37	; 0x25
    188a:	9e a1       	ldd	r25, Y+38	; 0x26
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e8       	ldi	r20, 0x80	; 128
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1898:	88 23       	and	r24, r24
    189a:	2c f4       	brge	.+10     	; 0x18a6 <LCD_sendCommand+0x160>
		__ticks = 1;
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	9a a3       	std	Y+34, r25	; 0x22
    18a2:	89 a3       	std	Y+33, r24	; 0x21
    18a4:	3f c0       	rjmp	.+126    	; 0x1924 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    18a6:	6b a1       	ldd	r22, Y+35	; 0x23
    18a8:	7c a1       	ldd	r23, Y+36	; 0x24
    18aa:	8d a1       	ldd	r24, Y+37	; 0x25
    18ac:	9e a1       	ldd	r25, Y+38	; 0x26
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	3f ef       	ldi	r19, 0xFF	; 255
    18b2:	4f e7       	ldi	r20, 0x7F	; 127
    18b4:	57 e4       	ldi	r21, 0x47	; 71
    18b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	4c f5       	brge	.+82     	; 0x1910 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18be:	6f a1       	ldd	r22, Y+39	; 0x27
    18c0:	78 a5       	ldd	r23, Y+40	; 0x28
    18c2:	89 a5       	ldd	r24, Y+41	; 0x29
    18c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9a a3       	std	Y+34, r25	; 0x22
    18e4:	89 a3       	std	Y+33, r24	; 0x21
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <LCD_sendCommand+0x1c0>
    18e8:	89 e1       	ldi	r24, 0x19	; 25
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	98 a3       	std	Y+32, r25	; 0x20
    18ee:	8f 8f       	std	Y+31, r24	; 0x1f
    18f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18f2:	98 a1       	ldd	r25, Y+32	; 0x20
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_sendCommand+0x1ae>
    18f8:	98 a3       	std	Y+32, r25	; 0x20
    18fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	89 a1       	ldd	r24, Y+33	; 0x21
    18fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9a a3       	std	Y+34, r25	; 0x22
    1904:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	89 a1       	ldd	r24, Y+33	; 0x21
    1908:	9a a1       	ldd	r25, Y+34	; 0x22
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <LCD_sendCommand+0x1a2>
    190e:	14 c0       	rjmp	.+40     	; 0x1938 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	6b a1       	ldd	r22, Y+35	; 0x23
    1912:	7c a1       	ldd	r23, Y+36	; 0x24
    1914:	8d a1       	ldd	r24, Y+37	; 0x25
    1916:	9e a1       	ldd	r25, Y+38	; 0x26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	9a a3       	std	Y+34, r25	; 0x22
    1922:	89 a3       	std	Y+33, r24	; 0x21
    1924:	89 a1       	ldd	r24, Y+33	; 0x21
    1926:	9a a1       	ldd	r25, Y+34	; 0x22
    1928:	9e 8f       	std	Y+30, r25	; 0x1e
    192a:	8d 8f       	std	Y+29, r24	; 0x1d
    192c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    192e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	f1 f7       	brne	.-4      	; 0x1930 <LCD_sendCommand+0x1ea>
    1934:	9e 8f       	std	Y+30, r25	; 0x1e
    1936:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1938:	82 e0       	ldi	r24, 0x02	; 2
    193a:	69 ad       	ldd	r22, Y+57	; 0x39
    193c:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePort>
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	a0 e8       	ldi	r26, 0x80	; 128
    1946:	bf e3       	ldi	r27, 0x3F	; 63
    1948:	89 8f       	std	Y+25, r24	; 0x19
    194a:	9a 8f       	std	Y+26, r25	; 0x1a
    194c:	ab 8f       	std	Y+27, r26	; 0x1b
    194e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1950:	69 8d       	ldd	r22, Y+25	; 0x19
    1952:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1954:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1956:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	4a e7       	ldi	r20, 0x7A	; 122
    195e:	53 e4       	ldi	r21, 0x43	; 67
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8d 8b       	std	Y+21, r24	; 0x15
    196a:	9e 8b       	std	Y+22, r25	; 0x16
    196c:	af 8b       	std	Y+23, r26	; 0x17
    196e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1970:	6d 89       	ldd	r22, Y+21	; 0x15
    1972:	7e 89       	ldd	r23, Y+22	; 0x16
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	98 8d       	ldd	r25, Y+24	; 0x18
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 e8       	ldi	r20, 0x80	; 128
    197e:	5f e3       	ldi	r21, 0x3F	; 63
    1980:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1984:	88 23       	and	r24, r24
    1986:	2c f4       	brge	.+10     	; 0x1992 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	9c 8b       	std	Y+20, r25	; 0x14
    198e:	8b 8b       	std	Y+19, r24	; 0x13
    1990:	3f c0       	rjmp	.+126    	; 0x1a10 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1992:	6d 89       	ldd	r22, Y+21	; 0x15
    1994:	7e 89       	ldd	r23, Y+22	; 0x16
    1996:	8f 89       	ldd	r24, Y+23	; 0x17
    1998:	98 8d       	ldd	r25, Y+24	; 0x18
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	3f ef       	ldi	r19, 0xFF	; 255
    199e:	4f e7       	ldi	r20, 0x7F	; 127
    19a0:	57 e4       	ldi	r21, 0x47	; 71
    19a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a6:	18 16       	cp	r1, r24
    19a8:	4c f5       	brge	.+82     	; 0x19fc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19aa:	69 8d       	ldd	r22, Y+25	; 0x19
    19ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e2       	ldi	r20, 0x20	; 32
    19b8:	51 e4       	ldi	r21, 0x41	; 65
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	bc 01       	movw	r22, r24
    19c4:	cd 01       	movw	r24, r26
    19c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	9c 8b       	std	Y+20, r25	; 0x14
    19d0:	8b 8b       	std	Y+19, r24	; 0x13
    19d2:	0f c0       	rjmp	.+30     	; 0x19f2 <LCD_sendCommand+0x2ac>
    19d4:	89 e1       	ldi	r24, 0x19	; 25
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9a 8b       	std	Y+18, r25	; 0x12
    19da:	89 8b       	std	Y+17, r24	; 0x11
    19dc:	89 89       	ldd	r24, Y+17	; 0x11
    19de:	9a 89       	ldd	r25, Y+18	; 0x12
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	f1 f7       	brne	.-4      	; 0x19e0 <LCD_sendCommand+0x29a>
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e8:	8b 89       	ldd	r24, Y+19	; 0x13
    19ea:	9c 89       	ldd	r25, Y+20	; 0x14
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f2:	8b 89       	ldd	r24, Y+19	; 0x13
    19f4:	9c 89       	ldd	r25, Y+20	; 0x14
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	69 f7       	brne	.-38     	; 0x19d4 <LCD_sendCommand+0x28e>
    19fa:	14 c0       	rjmp	.+40     	; 0x1a24 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fc:	6d 89       	ldd	r22, Y+21	; 0x15
    19fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1a00:	8f 89       	ldd	r24, Y+23	; 0x17
    1a02:	98 8d       	ldd	r25, Y+24	; 0x18
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	8b 89       	ldd	r24, Y+19	; 0x13
    1a12:	9c 89       	ldd	r25, Y+20	; 0x14
    1a14:	98 8b       	std	Y+16, r25	; 0x10
    1a16:	8f 87       	std	Y+15, r24	; 0x0f
    1a18:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1a:	98 89       	ldd	r25, Y+16	; 0x10
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_sendCommand+0x2d6>
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a24:	83 e0       	ldi	r24, 0x03	; 3
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e8       	ldi	r26, 0x80	; 128
    1a34:	bf e3       	ldi	r27, 0x3F	; 63
    1a36:	8b 87       	std	Y+11, r24	; 0x0b
    1a38:	9c 87       	std	Y+12, r25	; 0x0c
    1a3a:	ad 87       	std	Y+13, r26	; 0x0d
    1a3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a40:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a42:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a44:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	53 e4       	ldi	r21, 0x43	; 67
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8f 83       	std	Y+7, r24	; 0x07
    1a58:	98 87       	std	Y+8, r25	; 0x08
    1a5a:	a9 87       	std	Y+9, r26	; 0x09
    1a5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a60:	78 85       	ldd	r23, Y+8	; 0x08
    1a62:	89 85       	ldd	r24, Y+9	; 0x09
    1a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1a80:	6f 81       	ldd	r22, Y+7	; 0x07
    1a82:	78 85       	ldd	r23, Y+8	; 0x08
    1a84:	89 85       	ldd	r24, Y+9	; 0x09
    1a86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <LCD_sendCommand+0x39a>
    1ac2:	89 e1       	ldi	r24, 0x19	; 25
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <LCD_sendCommand+0x388>
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <LCD_sendCommand+0x37c>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6f 81       	ldd	r22, Y+7	; 0x07
    1aec:	78 85       	ldd	r23, Y+8	; 0x08
    1aee:	89 85       	ldd	r24, Y+9	; 0x09
    1af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e 83       	std	Y+6, r25	; 0x06
    1afc:	8d 83       	std	Y+5, r24	; 0x05
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	9e 81       	ldd	r25, Y+6	; 0x06
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_sendCommand+0x3c4>
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b12:	e9 96       	adiw	r28, 0x39	; 57
    1b14:	0f b6       	in	r0, 0x3f	; 63
    1b16:	f8 94       	cli
    1b18:	de bf       	out	0x3e, r29	; 62
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	cd bf       	out	0x3d, r28	; 61
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	cd b7       	in	r28, 0x3d	; 61
    1b2a:	de b7       	in	r29, 0x3e	; 62
    1b2c:	e9 97       	sbiw	r28, 0x39	; 57
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	f8 94       	cli
    1b32:	de bf       	out	0x3e, r29	; 62
    1b34:	0f be       	out	0x3f, r0	; 63
    1b36:	cd bf       	out	0x3d, r28	; 61
    1b38:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1b44:	80 e0       	ldi	r24, 0x00	; 0
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e8       	ldi	r26, 0x80	; 128
    1b4a:	bf e3       	ldi	r27, 0x3F	; 63
    1b4c:	8d ab       	std	Y+53, r24	; 0x35
    1b4e:	9e ab       	std	Y+54, r25	; 0x36
    1b50:	af ab       	std	Y+55, r26	; 0x37
    1b52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b54:	6d a9       	ldd	r22, Y+53	; 0x35
    1b56:	7e a9       	ldd	r23, Y+54	; 0x36
    1b58:	8f a9       	ldd	r24, Y+55	; 0x37
    1b5a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	53 e4       	ldi	r21, 0x43	; 67
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	89 ab       	std	Y+49, r24	; 0x31
    1b6e:	9a ab       	std	Y+50, r25	; 0x32
    1b70:	ab ab       	std	Y+51, r26	; 0x33
    1b72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b74:	69 a9       	ldd	r22, Y+49	; 0x31
    1b76:	7a a9       	ldd	r23, Y+50	; 0x32
    1b78:	8b a9       	ldd	r24, Y+51	; 0x33
    1b7a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	40 e8       	ldi	r20, 0x80	; 128
    1b82:	5f e3       	ldi	r21, 0x3F	; 63
    1b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b88:	88 23       	and	r24, r24
    1b8a:	2c f4       	brge	.+10     	; 0x1b96 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	98 ab       	std	Y+48, r25	; 0x30
    1b92:	8f a7       	std	Y+47, r24	; 0x2f
    1b94:	3f c0       	rjmp	.+126    	; 0x1c14 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1b96:	69 a9       	ldd	r22, Y+49	; 0x31
    1b98:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	3f ef       	ldi	r19, 0xFF	; 255
    1ba2:	4f e7       	ldi	r20, 0x7F	; 127
    1ba4:	57 e4       	ldi	r21, 0x47	; 71
    1ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1baa:	18 16       	cp	r1, r24
    1bac:	4c f5       	brge	.+82     	; 0x1c00 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bae:	6d a9       	ldd	r22, Y+53	; 0x35
    1bb0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bb2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bb4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	40 e2       	ldi	r20, 0x20	; 32
    1bbc:	51 e4       	ldi	r21, 0x41	; 65
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	bc 01       	movw	r22, r24
    1bc8:	cd 01       	movw	r24, r26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	98 ab       	std	Y+48, r25	; 0x30
    1bd4:	8f a7       	std	Y+47, r24	; 0x2f
    1bd6:	0f c0       	rjmp	.+30     	; 0x1bf6 <LCD_displayCharacter+0xd2>
    1bd8:	89 e1       	ldi	r24, 0x19	; 25
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9e a7       	std	Y+46, r25	; 0x2e
    1bde:	8d a7       	std	Y+45, r24	; 0x2d
    1be0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1be2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_displayCharacter+0xc0>
    1be8:	9e a7       	std	Y+46, r25	; 0x2e
    1bea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bee:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	98 ab       	std	Y+48, r25	; 0x30
    1bf4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bf8:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	69 f7       	brne	.-38     	; 0x1bd8 <LCD_displayCharacter+0xb4>
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c00:	69 a9       	ldd	r22, Y+49	; 0x31
    1c02:	7a a9       	ldd	r23, Y+50	; 0x32
    1c04:	8b a9       	ldd	r24, Y+51	; 0x33
    1c06:	9c a9       	ldd	r25, Y+52	; 0x34
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	98 ab       	std	Y+48, r25	; 0x30
    1c12:	8f a7       	std	Y+47, r24	; 0x2f
    1c14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c16:	98 a9       	ldd	r25, Y+48	; 0x30
    1c18:	9c a7       	std	Y+44, r25	; 0x2c
    1c1a:	8b a7       	std	Y+43, r24	; 0x2b
    1c1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <LCD_displayCharacter+0xfc>
    1c24:	9c a7       	std	Y+44, r25	; 0x2c
    1c26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	62 e0       	ldi	r22, 0x02	; 2
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e8       	ldi	r26, 0x80	; 128
    1c38:	bf e3       	ldi	r27, 0x3F	; 63
    1c3a:	8f a3       	std	Y+39, r24	; 0x27
    1c3c:	98 a7       	std	Y+40, r25	; 0x28
    1c3e:	a9 a7       	std	Y+41, r26	; 0x29
    1c40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	6f a1       	ldd	r22, Y+39	; 0x27
    1c44:	78 a5       	ldd	r23, Y+40	; 0x28
    1c46:	89 a5       	ldd	r24, Y+41	; 0x29
    1c48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4a e7       	ldi	r20, 0x7A	; 122
    1c50:	53 e4       	ldi	r21, 0x43	; 67
    1c52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8b a3       	std	Y+35, r24	; 0x23
    1c5c:	9c a3       	std	Y+36, r25	; 0x24
    1c5e:	ad a3       	std	Y+37, r26	; 0x25
    1c60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c62:	6b a1       	ldd	r22, Y+35	; 0x23
    1c64:	7c a1       	ldd	r23, Y+36	; 0x24
    1c66:	8d a1       	ldd	r24, Y+37	; 0x25
    1c68:	9e a1       	ldd	r25, Y+38	; 0x26
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e8       	ldi	r20, 0x80	; 128
    1c70:	5f e3       	ldi	r21, 0x3F	; 63
    1c72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c76:	88 23       	and	r24, r24
    1c78:	2c f4       	brge	.+10     	; 0x1c84 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	9a a3       	std	Y+34, r25	; 0x22
    1c80:	89 a3       	std	Y+33, r24	; 0x21
    1c82:	3f c0       	rjmp	.+126    	; 0x1d02 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1c84:	6b a1       	ldd	r22, Y+35	; 0x23
    1c86:	7c a1       	ldd	r23, Y+36	; 0x24
    1c88:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	3f ef       	ldi	r19, 0xFF	; 255
    1c90:	4f e7       	ldi	r20, 0x7F	; 127
    1c92:	57 e4       	ldi	r21, 0x47	; 71
    1c94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c98:	18 16       	cp	r1, r24
    1c9a:	4c f5       	brge	.+82     	; 0x1cee <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9c:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9e:	78 a5       	ldd	r23, Y+40	; 0x28
    1ca0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e2       	ldi	r20, 0x20	; 32
    1caa:	51 e4       	ldi	r21, 0x41	; 65
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	bc 01       	movw	r22, r24
    1cb6:	cd 01       	movw	r24, r26
    1cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	9a a3       	std	Y+34, r25	; 0x22
    1cc2:	89 a3       	std	Y+33, r24	; 0x21
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <LCD_displayCharacter+0x1c0>
    1cc6:	89 e1       	ldi	r24, 0x19	; 25
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	98 a3       	std	Y+32, r25	; 0x20
    1ccc:	8f 8f       	std	Y+31, r24	; 0x1f
    1cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cd0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_displayCharacter+0x1ae>
    1cd6:	98 a3       	std	Y+32, r25	; 0x20
    1cd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	9a a3       	std	Y+34, r25	; 0x22
    1ce2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce8:	00 97       	sbiw	r24, 0x00	; 0
    1cea:	69 f7       	brne	.-38     	; 0x1cc6 <LCD_displayCharacter+0x1a2>
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cee:	6b a1       	ldd	r22, Y+35	; 0x23
    1cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	9e 8f       	std	Y+30, r25	; 0x1e
    1d08:	8d 8f       	std	Y+29, r24	; 0x1d
    1d0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_displayCharacter+0x1ea>
    1d12:	9e 8f       	std	Y+30, r25	; 0x1e
    1d14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	69 ad       	ldd	r22, Y+57	; 0x39
    1d1a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <GPIO_writePort>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	a0 e8       	ldi	r26, 0x80	; 128
    1d24:	bf e3       	ldi	r27, 0x3F	; 63
    1d26:	89 8f       	std	Y+25, r24	; 0x19
    1d28:	9a 8f       	std	Y+26, r25	; 0x1a
    1d2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1d2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	53 e4       	ldi	r21, 0x43	; 67
    1d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8d 8b       	std	Y+21, r24	; 0x15
    1d48:	9e 8b       	std	Y+22, r25	; 0x16
    1d4a:	af 8b       	std	Y+23, r26	; 0x17
    1d4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d50:	7e 89       	ldd	r23, Y+22	; 0x16
    1d52:	8f 89       	ldd	r24, Y+23	; 0x17
    1d54:	98 8d       	ldd	r25, Y+24	; 0x18
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d62:	88 23       	and	r24, r24
    1d64:	2c f4       	brge	.+10     	; 0x1d70 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9c 8b       	std	Y+20, r25	; 0x14
    1d6c:	8b 8b       	std	Y+19, r24	; 0x13
    1d6e:	3f c0       	rjmp	.+126    	; 0x1dee <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1d70:	6d 89       	ldd	r22, Y+21	; 0x15
    1d72:	7e 89       	ldd	r23, Y+22	; 0x16
    1d74:	8f 89       	ldd	r24, Y+23	; 0x17
    1d76:	98 8d       	ldd	r25, Y+24	; 0x18
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	3f ef       	ldi	r19, 0xFF	; 255
    1d7c:	4f e7       	ldi	r20, 0x7F	; 127
    1d7e:	57 e4       	ldi	r21, 0x47	; 71
    1d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d84:	18 16       	cp	r1, r24
    1d86:	4c f5       	brge	.+82     	; 0x1dda <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d88:	69 8d       	ldd	r22, Y+25	; 0x19
    1d8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	40 e2       	ldi	r20, 0x20	; 32
    1d96:	51 e4       	ldi	r21, 0x41	; 65
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	9c 8b       	std	Y+20, r25	; 0x14
    1dae:	8b 8b       	std	Y+19, r24	; 0x13
    1db0:	0f c0       	rjmp	.+30     	; 0x1dd0 <LCD_displayCharacter+0x2ac>
    1db2:	89 e1       	ldi	r24, 0x19	; 25
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	9a 8b       	std	Y+18, r25	; 0x12
    1db8:	89 8b       	std	Y+17, r24	; 0x11
    1dba:	89 89       	ldd	r24, Y+17	; 0x11
    1dbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_displayCharacter+0x29a>
    1dc2:	9a 8b       	std	Y+18, r25	; 0x12
    1dc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	69 f7       	brne	.-38     	; 0x1db2 <LCD_displayCharacter+0x28e>
    1dd8:	14 c0       	rjmp	.+40     	; 0x1e02 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	9c 8b       	std	Y+20, r25	; 0x14
    1dec:	8b 8b       	std	Y+19, r24	; 0x13
    1dee:	8b 89       	ldd	r24, Y+19	; 0x13
    1df0:	9c 89       	ldd	r25, Y+20	; 0x14
    1df2:	98 8b       	std	Y+16, r25	; 0x10
    1df4:	8f 87       	std	Y+15, r24	; 0x0f
    1df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df8:	98 89       	ldd	r25, Y+16	; 0x10
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_displayCharacter+0x2d6>
    1dfe:	98 8b       	std	Y+16, r25	; 0x10
    1e00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e02:	83 e0       	ldi	r24, 0x03	; 3
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e8       	ldi	r26, 0x80	; 128
    1e12:	bf e3       	ldi	r27, 0x3F	; 63
    1e14:	8b 87       	std	Y+11, r24	; 0x0b
    1e16:	9c 87       	std	Y+12, r25	; 0x0c
    1e18:	ad 87       	std	Y+13, r26	; 0x0d
    1e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a e7       	ldi	r20, 0x7A	; 122
    1e2a:	53 e4       	ldi	r21, 0x43	; 67
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	98 87       	std	Y+8, r25	; 0x08
    1e38:	a9 87       	std	Y+9, r26	; 0x09
    1e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <LCD_displayCharacter+0x39a>
    1ea0:	89 e1       	ldi	r24, 0x19	; 25
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_displayCharacter+0x388>
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <LCD_displayCharacter+0x37c>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <LCD_displayCharacter+0x3c4>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ef0:	e9 96       	adiw	r28, 0x39	; 57
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	f8 94       	cli
    1ef6:	de bf       	out	0x3e, r29	; 62
    1ef8:	0f be       	out	0x3f, r0	; 63
    1efa:	cd bf       	out	0x3d, r28	; 61
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(string_t Str)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <LCD_displayString+0x6>
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f12:	19 82       	std	Y+1, r1	; 0x01
    1f14:	0e c0       	rjmp	.+28     	; 0x1f32 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	28 2f       	mov	r18, r24
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f20:	fc 01       	movw	r30, r24
    1f22:	e2 0f       	add	r30, r18
    1f24:	f3 1f       	adc	r31, r19
    1f26:	80 81       	ld	r24, Z
    1f28:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <LCD_displayCharacter>
		i++;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	8f 5f       	subi	r24, 0xFF	; 255
    1f30:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(string_t Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	80 81       	ld	r24, Z
    1f44:	88 23       	and	r24, r24
    1f46:	39 f7       	brne	.-50     	; 0x1f16 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	cf 91       	pop	r28
    1f50:	df 91       	pop	r29
    1f52:	08 95       	ret

00001f54 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1f54:	df 93       	push	r29
    1f56:	cf 93       	push	r28
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <LCD_moveCursor+0x6>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <LCD_moveCursor+0x8>
    1f5c:	0f 92       	push	r0
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3d 83       	std	Y+5, r19	; 0x05
    1f6e:	2c 83       	std	Y+4, r18	; 0x04
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	9d 81       	ldd	r25, Y+5	; 0x05
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	c1 f0       	breq	.+48     	; 0x1faa <LCD_moveCursor+0x56>
    1f7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <LCD_moveCursor+0x3a>
    1f84:	8c 81       	ldd	r24, Y+4	; 0x04
    1f86:	9d 81       	ldd	r25, Y+5	; 0x05
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	61 f0       	breq	.+24     	; 0x1fa4 <LCD_moveCursor+0x50>
    1f8c:	19 c0       	rjmp	.+50     	; 0x1fc0 <LCD_moveCursor+0x6c>
    1f8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f90:	3d 81       	ldd	r19, Y+5	; 0x05
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	31 05       	cpc	r19, r1
    1f96:	69 f0       	breq	.+26     	; 0x1fb2 <LCD_moveCursor+0x5e>
    1f98:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	61 f0       	breq	.+24     	; 0x1fba <LCD_moveCursor+0x66>
    1fa2:	0e c0       	rjmp	.+28     	; 0x1fc0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	0b c0       	rjmp	.+22     	; 0x1fc0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	80 5c       	subi	r24, 0xC0	; 192
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	80 5f       	subi	r24, 0xF0	; 240
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	80 5b       	subi	r24, 0xB0	; 176
    1fbe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	80 68       	ori	r24, 0x80	; 128
    1fc4:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_sendCommand>
}
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,string_t Str)
{
    1fd8:	df 93       	push	r29
    1fda:	cf 93       	push	r28
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <LCD_displayStringRowColumn+0x6>
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <LCD_displayStringRowColumn+0x8>
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	6a 83       	std	Y+2, r22	; 0x02
    1fe8:	5c 83       	std	Y+4, r21	; 0x04
    1fea:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	6a 81       	ldd	r22, Y+2	; 0x02
    1ff0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
}
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	62 97       	sbiw	r28, 0x12	; 18
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	9a 89       	ldd	r25, Y+18	; 0x12
    2026:	9e 01       	movw	r18, r28
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	b9 01       	movw	r22, r18
    202e:	4a e0       	ldi	r20, 0x0A	; 10
    2030:	50 e0       	ldi	r21, 0x00	; 0
    2032:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2036:	ce 01       	movw	r24, r28
    2038:	01 96       	adiw	r24, 0x01	; 1
    203a:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
}
    203e:	62 96       	adiw	r28, 0x12	; 18
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_sendCommand>
}
    205e:	cf 91       	pop	r28
    2060:	df 91       	pop	r29
    2062:	08 95       	ret

00002064 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2064:	df 93       	push	r29
    2066:	cf 93       	push	r28
    2068:	00 d0       	rcall	.+0      	; 0x206a <LM35_getTemperature+0x6>
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    2070:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    2072:	1a 82       	std	Y+2, r1	; 0x02
    2074:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	0e 94 92 07 	call	0xf24	; 0xf24 <ADC_readChannel>
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	cc 01       	movw	r24, r24
    2086:	a0 e0       	ldi	r26, 0x00	; 0
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	26 e9       	ldi	r18, 0x96	; 150
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__mulsi3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	2a e0       	ldi	r18, 0x0A	; 10
    20b0:	37 ed       	ldi	r19, 0xD7	; 215
    20b2:	43 e2       	ldi	r20, 0x23	; 35
    20b4:	50 e4       	ldi	r21, 0x40	; 64
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 ed       	ldi	r19, 0xD0	; 208
    20c6:	4f eb       	ldi	r20, 0xBF	; 191
    20c8:	54 e4       	ldi	r21, 0x44	; 68
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <main>:
 */

#include <main.h>

int main( void )
{
    20ee:	df 93       	push	r29
    20f0:	cf 93       	push	r28
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	60 97       	sbiw	r28, 0x10	; 16
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
	/* Initiate the ADC using its configurable reference voltage and pre-scaler */
	ADC_ConfigType ADC_parameters = {AREF_INTERNAL, PSK_8_FCLK};
    2102:	83 e0       	ldi	r24, 0x03	; 3
    2104:	8f 87       	std	Y+15, r24	; 0x0f
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	88 8b       	std	Y+16, r24	; 0x10
	ADC_init(&ADC_parameters);
    210a:	ce 01       	movw	r24, r28
    210c:	0f 96       	adiw	r24, 0x0f	; 15
    210e:	0e 94 75 07 	call	0xeea	; 0xeea <ADC_init>

	/* Calculate temperature */
	g_current_temp = LM35_getTemperature();
    2112:	0e 94 32 10 	call	0x2064	; 0x2064 <LM35_getTemperature>
    2116:	80 93 b2 01 	sts	0x01B2, r24

	/* Set the motor initial value */
	DcMotor_Init();
    211a:	0e 94 b2 12 	call	0x2564	; 0x2564 <DcMotor_Init>

	/* Initialize LCD */
	LCD_init();
    211e:	0e 94 07 0b 	call	0x160e	; 0x160e <LCD_init>
	 * 			PPPP:	3-digit fan speed + % symbol
	 * 				or	4-digit "STOP" word as speed = ZERO
	 * All other characters are fixed
	 */

	LCD_moveCursor(ROW_0,COL_0);
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	60 e0       	ldi	r22, 0x00	; 0
    2126:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
	LCD_displayString("Temp =     deg C");
    212a:	80 e6       	ldi	r24, 0x60	; 96
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>

	LCD_moveCursor(ROW_1,COL_0);
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	60 e0       	ldi	r22, 0x00	; 0
    2136:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
	LCD_displayString("Fan: O    (    )");
    213a:	81 e7       	ldi	r24, 0x71	; 113
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>

	/* For the 1st milliseconds, OFF state will appear */
	LCD_moveCursor(ROW_1,COL_6);
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	66 e0       	ldi	r22, 0x06	; 6
    2146:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
	LCD_displayString("FF");
    214a:	82 e8       	ldi	r24, 0x82	; 130
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
	LCD_moveCursor(ROW_1,COL_11);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	6b e0       	ldi	r22, 0x0B	; 11
    2156:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
	LCD_displayString("STOP");
    215a:	85 e8       	ldi	r24, 0x85	; 133
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>

	while(TRUE)
	{
		/* continuously calculate the temperature */
		g_current_temp = LM35_getTemperature();
    2162:	0e 94 32 10 	call	0x2064	; 0x2064 <LM35_getTemperature>
    2166:	80 93 b2 01 	sts	0x01B2, r24

		/* check if temperature value changed.
		 * purpose: to update VVV only if changed, this will decrease blinking */
		if(g_current_temp != g_displayed_temp)
    216a:	90 91 b2 01 	lds	r25, 0x01B2
    216e:	80 91 b6 01 	lds	r24, 0x01B6
    2172:	98 17       	cp	r25, r24
    2174:	b1 f0       	breq	.+44     	; 0x21a2 <main+0xb4>
		{
			/* free 3-digit space for VVV */
			LCD_moveCursor(ROW_0,COL_7);
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	67 e0       	ldi	r22, 0x07	; 7
    217a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
			LCD_displayString("   ");
    217e:	8a e8       	ldi	r24, 0x8A	; 138
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
			/* print the new VVV */
			LCD_moveCursor(ROW_0,COL_7);
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	67 e0       	ldi	r22, 0x07	; 7
    218a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
			LCD_intgerToString(g_current_temp);
    218e:	80 91 b2 01 	lds	r24, 0x01B2
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_intgerToString>
			/* update the displayed temperature value */
			g_displayed_temp = g_current_temp;
    219a:	80 91 b2 01 	lds	r24, 0x01B2
    219e:	80 93 b6 01 	sts	0x01B6, r24
		}

		/* check the range of the temperature to set the state
		 * and speed then rotate the motor accordingly */
		if		(g_current_temp >= TEMP_0 && g_current_temp < TEMP_30)
    21a2:	80 91 b2 01 	lds	r24, 0x01B2
    21a6:	8e 31       	cpi	r24, 0x1E	; 30
    21a8:	08 f0       	brcs	.+2      	; 0x21ac <main+0xbe>
    21aa:	41 c0       	rjmp	.+130    	; 0x222e <main+0x140>
		{
			g_current_speed = FAN_OFF;
    21ac:	10 92 b4 01 	sts	0x01B4, r1
			g_current_state = MOTOR_STOP;
    21b0:	10 92 b7 01 	sts	0x01B7, r1
			DcMotor_Rotate(g_current_state, g_current_speed);
    21b4:	80 91 b7 01 	lds	r24, 0x01B7
    21b8:	90 91 b4 01 	lds	r25, 0x01B4
    21bc:	69 2f       	mov	r22, r25
    21be:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>

			/* check if temperature value changed.
			 * purpose: to update VVV only if changed, this will decrease blinking */
			if(g_current_state != g_displayed_state)
    21c2:	90 91 b7 01 	lds	r25, 0x01B7
    21c6:	80 91 b5 01 	lds	r24, 0x01B5
    21ca:	98 17       	cp	r25, r24
    21cc:	a1 f0       	breq	.+40     	; 0x21f6 <main+0x108>
			{
				/* free 2-digit space for SS */
				LCD_moveCursor(ROW_1,COL_6);
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	66 e0       	ldi	r22, 0x06	; 6
    21d2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    21d6:	8e e8       	ldi	r24, 0x8E	; 142
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new SS */
				LCD_moveCursor(ROW_1,COL_6);
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	66 e0       	ldi	r22, 0x06	; 6
    21e2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("FF");
    21e6:	82 e8       	ldi	r24, 0x82	; 130
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_state = g_current_state;
    21ee:	80 91 b7 01 	lds	r24, 0x01B7
    21f2:	80 93 b5 01 	sts	0x01B5, r24
			}

			/* check if temperature value changed.
			 * purpose: to update VVV only if changed, this will decrease blinking */
			if(g_current_speed != g_displayed_speed)
    21f6:	90 91 b4 01 	lds	r25, 0x01B4
    21fa:	80 91 b3 01 	lds	r24, 0x01B3
    21fe:	98 17       	cp	r25, r24
    2200:	09 f4       	brne	.+2      	; 0x2204 <main+0x116>
    2202:	3d c1       	rjmp	.+634    	; 0x247e <main+0x390>
			{
				/* free 4-digit space for PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	6b e0       	ldi	r22, 0x0B	; 11
    2208:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    220c:	8e e8       	ldi	r24, 0x8E	; 142
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	6b e0       	ldi	r22, 0x0B	; 11
    2218:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("STOP");
    221c:	85 e8       	ldi	r24, 0x85	; 133
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_speed = g_current_speed;
    2224:	80 91 b4 01 	lds	r24, 0x01B4
    2228:	80 93 b3 01 	sts	0x01B3, r24
    222c:	28 c1       	rjmp	.+592    	; 0x247e <main+0x390>
			}
		}


		else if (g_current_temp >= TEMP_30 && g_current_temp < TEMP_60)
    222e:	80 91 b2 01 	lds	r24, 0x01B2
    2232:	8e 31       	cpi	r24, 0x1E	; 30
    2234:	08 f4       	brcc	.+2      	; 0x2238 <main+0x14a>
    2236:	48 c0       	rjmp	.+144    	; 0x22c8 <main+0x1da>
    2238:	80 91 b2 01 	lds	r24, 0x01B2
    223c:	8c 33       	cpi	r24, 0x3C	; 60
    223e:	08 f0       	brcs	.+2      	; 0x2242 <main+0x154>
    2240:	43 c0       	rjmp	.+134    	; 0x22c8 <main+0x1da>
		{
			g_current_speed = FAN_ON_25;
    2242:	89 e1       	ldi	r24, 0x19	; 25
    2244:	80 93 b4 01 	sts	0x01B4, r24
			g_current_state = MOTOR_CW;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 b7 01 	sts	0x01B7, r24
			DcMotor_Rotate(g_current_state, g_current_speed);
    224e:	80 91 b7 01 	lds	r24, 0x01B7
    2252:	90 91 b4 01 	lds	r25, 0x01B4
    2256:	69 2f       	mov	r22, r25
    2258:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>

			if(g_current_state != g_displayed_state)
    225c:	90 91 b7 01 	lds	r25, 0x01B7
    2260:	80 91 b5 01 	lds	r24, 0x01B5
    2264:	98 17       	cp	r25, r24
    2266:	a1 f0       	breq	.+40     	; 0x2290 <main+0x1a2>
			{
				/* free 2-digit space for SS */
				LCD_moveCursor(ROW_1,COL_6);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	66 e0       	ldi	r22, 0x06	; 6
    226c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    2270:	8e e8       	ldi	r24, 0x8E	; 142
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new SS */
				LCD_moveCursor(ROW_1,COL_6);
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	66 e0       	ldi	r22, 0x06	; 6
    227c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("N ");
    2280:	81 e9       	ldi	r24, 0x91	; 145
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_state = g_current_state;
    2288:	80 91 b7 01 	lds	r24, 0x01B7
    228c:	80 93 b5 01 	sts	0x01B5, r24
			}

			if(g_current_speed != g_displayed_speed)
    2290:	90 91 b4 01 	lds	r25, 0x01B4
    2294:	80 91 b3 01 	lds	r24, 0x01B3
    2298:	98 17       	cp	r25, r24
    229a:	09 f4       	brne	.+2      	; 0x229e <main+0x1b0>
    229c:	f0 c0       	rjmp	.+480    	; 0x247e <main+0x390>
			{
				/* free 4-digit space for PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	6b e0       	ldi	r22, 0x0B	; 11
    22a2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    22a6:	8e e8       	ldi	r24, 0x8E	; 142
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	6b e0       	ldi	r22, 0x0B	; 11
    22b2:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString(" 25%");
    22b6:	84 e9       	ldi	r24, 0x94	; 148
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_speed = g_current_speed;
    22be:	80 91 b4 01 	lds	r24, 0x01B4
    22c2:	80 93 b3 01 	sts	0x01B3, r24
    22c6:	db c0       	rjmp	.+438    	; 0x247e <main+0x390>
			}
		}

		else if (g_current_temp >= TEMP_60 && g_current_temp < TEMP_90)
    22c8:	80 91 b2 01 	lds	r24, 0x01B2
    22cc:	8c 33       	cpi	r24, 0x3C	; 60
    22ce:	08 f4       	brcc	.+2      	; 0x22d2 <main+0x1e4>
    22d0:	48 c0       	rjmp	.+144    	; 0x2362 <main+0x274>
    22d2:	80 91 b2 01 	lds	r24, 0x01B2
    22d6:	8a 35       	cpi	r24, 0x5A	; 90
    22d8:	08 f0       	brcs	.+2      	; 0x22dc <main+0x1ee>
    22da:	43 c0       	rjmp	.+134    	; 0x2362 <main+0x274>
		{
			g_current_speed = FAN_ON_50;
    22dc:	82 e3       	ldi	r24, 0x32	; 50
    22de:	80 93 b4 01 	sts	0x01B4, r24
			g_current_state = MOTOR_CW;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	80 93 b7 01 	sts	0x01B7, r24
			DcMotor_Rotate(g_current_state, g_current_speed);
    22e8:	80 91 b7 01 	lds	r24, 0x01B7
    22ec:	90 91 b4 01 	lds	r25, 0x01B4
    22f0:	69 2f       	mov	r22, r25
    22f2:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>

			if(g_current_state != g_displayed_state)
    22f6:	90 91 b7 01 	lds	r25, 0x01B7
    22fa:	80 91 b5 01 	lds	r24, 0x01B5
    22fe:	98 17       	cp	r25, r24
    2300:	a1 f0       	breq	.+40     	; 0x232a <main+0x23c>
			{
				/* free 2-digit space for SS */
				LCD_moveCursor(ROW_1,COL_6);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	66 e0       	ldi	r22, 0x06	; 6
    2306:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    230a:	8e e8       	ldi	r24, 0x8E	; 142
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new SS */
				LCD_moveCursor(ROW_1,COL_6);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	66 e0       	ldi	r22, 0x06	; 6
    2316:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("N ");
    231a:	81 e9       	ldi	r24, 0x91	; 145
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_state = g_current_state;
    2322:	80 91 b7 01 	lds	r24, 0x01B7
    2326:	80 93 b5 01 	sts	0x01B5, r24
			}

			if(g_current_speed != g_displayed_speed)
    232a:	90 91 b4 01 	lds	r25, 0x01B4
    232e:	80 91 b3 01 	lds	r24, 0x01B3
    2332:	98 17       	cp	r25, r24
    2334:	09 f4       	brne	.+2      	; 0x2338 <main+0x24a>
    2336:	a3 c0       	rjmp	.+326    	; 0x247e <main+0x390>
			{
				/* free 4-digit space for PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	6b e0       	ldi	r22, 0x0B	; 11
    233c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    2340:	8e e8       	ldi	r24, 0x8E	; 142
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	6b e0       	ldi	r22, 0x0B	; 11
    234c:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString(" 50%");
    2350:	89 e9       	ldi	r24, 0x99	; 153
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_speed = g_current_speed;
    2358:	80 91 b4 01 	lds	r24, 0x01B4
    235c:	80 93 b3 01 	sts	0x01B3, r24
    2360:	8e c0       	rjmp	.+284    	; 0x247e <main+0x390>
			}
		}

		else if (g_current_temp >= TEMP_90 && g_current_temp < TEMP_120)
    2362:	80 91 b2 01 	lds	r24, 0x01B2
    2366:	8a 35       	cpi	r24, 0x5A	; 90
    2368:	08 f4       	brcc	.+2      	; 0x236c <main+0x27e>
    236a:	48 c0       	rjmp	.+144    	; 0x23fc <main+0x30e>
    236c:	80 91 b2 01 	lds	r24, 0x01B2
    2370:	88 37       	cpi	r24, 0x78	; 120
    2372:	08 f0       	brcs	.+2      	; 0x2376 <main+0x288>
    2374:	43 c0       	rjmp	.+134    	; 0x23fc <main+0x30e>
		{
			g_current_speed = FAN_ON_75;
    2376:	8b e4       	ldi	r24, 0x4B	; 75
    2378:	80 93 b4 01 	sts	0x01B4, r24
			g_current_state = MOTOR_CW;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 b7 01 	sts	0x01B7, r24
			DcMotor_Rotate(g_current_state, g_current_speed);
    2382:	80 91 b7 01 	lds	r24, 0x01B7
    2386:	90 91 b4 01 	lds	r25, 0x01B4
    238a:	69 2f       	mov	r22, r25
    238c:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>

			if(g_current_state != g_displayed_state)
    2390:	90 91 b7 01 	lds	r25, 0x01B7
    2394:	80 91 b5 01 	lds	r24, 0x01B5
    2398:	98 17       	cp	r25, r24
    239a:	a1 f0       	breq	.+40     	; 0x23c4 <main+0x2d6>
			{
				/* free 2-digit space for SS */
				LCD_moveCursor(ROW_1,COL_6);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	66 e0       	ldi	r22, 0x06	; 6
    23a0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    23a4:	8e e8       	ldi	r24, 0x8E	; 142
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new SS */
				LCD_moveCursor(ROW_1,COL_6);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	66 e0       	ldi	r22, 0x06	; 6
    23b0:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("N ");
    23b4:	81 e9       	ldi	r24, 0x91	; 145
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_state = g_current_state;
    23bc:	80 91 b7 01 	lds	r24, 0x01B7
    23c0:	80 93 b5 01 	sts	0x01B5, r24
			}

			if(g_current_speed != g_displayed_speed)
    23c4:	90 91 b4 01 	lds	r25, 0x01B4
    23c8:	80 91 b3 01 	lds	r24, 0x01B3
    23cc:	98 17       	cp	r25, r24
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <main+0x2e4>
    23d0:	56 c0       	rjmp	.+172    	; 0x247e <main+0x390>
			{
				/* free 4-digit space for PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	6b e0       	ldi	r22, 0x0B	; 11
    23d6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    23da:	8e e8       	ldi	r24, 0x8E	; 142
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	6b e0       	ldi	r22, 0x0B	; 11
    23e6:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString(" 75%");
    23ea:	8e e9       	ldi	r24, 0x9E	; 158
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_speed = g_current_speed;
    23f2:	80 91 b4 01 	lds	r24, 0x01B4
    23f6:	80 93 b3 01 	sts	0x01B3, r24
    23fa:	41 c0       	rjmp	.+130    	; 0x247e <main+0x390>
			}
		}

		else
		{
			g_current_speed = FAN_ON_100;
    23fc:	84 e6       	ldi	r24, 0x64	; 100
    23fe:	80 93 b4 01 	sts	0x01B4, r24
			g_current_state = MOTOR_CW;
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	80 93 b7 01 	sts	0x01B7, r24
			DcMotor_Rotate(g_current_state, g_current_speed);
    2408:	80 91 b7 01 	lds	r24, 0x01B7
    240c:	90 91 b4 01 	lds	r25, 0x01B4
    2410:	69 2f       	mov	r22, r25
    2412:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>

			if(g_current_state != g_displayed_state)
    2416:	90 91 b7 01 	lds	r25, 0x01B7
    241a:	80 91 b5 01 	lds	r24, 0x01B5
    241e:	98 17       	cp	r25, r24
    2420:	a1 f0       	breq	.+40     	; 0x244a <main+0x35c>
			{
				/* free 2-digit space for SS */
				LCD_moveCursor(ROW_1,COL_6);
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	66 e0       	ldi	r22, 0x06	; 6
    2426:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    242a:	8e e8       	ldi	r24, 0x8E	; 142
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new SS */
				LCD_moveCursor(ROW_1,COL_6);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	66 e0       	ldi	r22, 0x06	; 6
    2436:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("N ");
    243a:	81 e9       	ldi	r24, 0x91	; 145
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_state = g_current_state;
    2442:	80 91 b7 01 	lds	r24, 0x01B7
    2446:	80 93 b5 01 	sts	0x01B5, r24
			}

			if(g_current_speed != g_displayed_speed)
    244a:	90 91 b4 01 	lds	r25, 0x01B4
    244e:	80 91 b3 01 	lds	r24, 0x01B3
    2452:	98 17       	cp	r25, r24
    2454:	a1 f0       	breq	.+40     	; 0x247e <main+0x390>
			{
				/* free 4-digit space for PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	6b e0       	ldi	r22, 0x0B	; 11
    245a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("  ");
    245e:	8e e8       	ldi	r24, 0x8E	; 142
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				/* print the new PPPP */
				LCD_moveCursor(ROW_1,COL_11);
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	6b e0       	ldi	r22, 0x0B	; 11
    246a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <LCD_moveCursor>
				LCD_displayString("100%");
    246e:	83 ea       	ldi	r24, 0xA3	; 163
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <LCD_displayString>
				g_displayed_speed = g_current_speed;
    2476:	80 91 b4 01 	lds	r24, 0x01B4
    247a:	80 93 b3 01 	sts	0x01B3, r24
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a8 ec       	ldi	r26, 0xC8	; 200
    2484:	b2 e4       	ldi	r27, 0x42	; 66
    2486:	8b 87       	std	Y+11, r24	; 0x0b
    2488:	9c 87       	std	Y+12, r25	; 0x0c
    248a:	ad 87       	std	Y+13, r26	; 0x0d
    248c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	53 e4       	ldi	r21, 0x43	; 67
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 83       	std	Y+7, r24	; 0x07
    24a8:	98 87       	std	Y+8, r25	; 0x08
    24aa:	a9 87       	std	Y+9, r26	; 0x09
    24ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <main+0x3e2>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <main+0x460>
	else if (__tmp > 65535)
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <main+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <main+0x442>
    2512:	89 e1       	ldi	r24, 0x19	; 25
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <main+0x430>
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <main+0x424>
    2538:	14 ce       	rjmp	.-984    	; 0x2162 <main+0x74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <main+0x46c>
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	ff cd       	rjmp	.-1026   	; 0x2162 <main+0x74>

00002564 <DcMotor_Init>:

static DcMotor_State_t motor_state;
static DcMotor_Speed_t motor_speed;

void DcMotor_Init(void)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
	/* initialize motor EN1 pin */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	63 e0       	ldi	r22, 0x03	; 3
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_LOW);
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	63 e0       	ldi	r22, 0x03	; 3
    257a:	40 e0       	ldi	r20, 0x00	; 0
    257c:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

	/* initialize IN1 pin */
	GPIO_setupPinDirection(PORTB_ID, PIN4_ID, PIN_OUTPUT);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	64 e0       	ldi	r22, 0x04	; 4
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	64 e0       	ldi	r22, 0x04	; 4
    258e:	40 e0       	ldi	r20, 0x00	; 0
    2590:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

	/* initialize IN2 pin */
	GPIO_setupPinDirection(PORTB_ID, PIN5_ID, PIN_OUTPUT);
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	65 e0       	ldi	r22, 0x05	; 5
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_LOW);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	65 e0       	ldi	r22, 0x05	; 5
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

	/* Set timer to 0 duty cycle */
	Timer0_PWM_Init(STOP);
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	0e 94 3f 13 	call	0x267e	; 0x267e <Timer0_PWM_Init>

	/* set the initial motor state as STOP */
	motor_state = MOTOR_STOP;
    25ae:	10 92 b0 01 	sts	0x01B0, r1
	motor_speed = FAN_OFF;
    25b2:	10 92 b1 01 	sts	0x01B1, r1
	DcMotor_Rotate(motor_state, motor_speed);
    25b6:	80 91 b0 01 	lds	r24, 0x01B0
    25ba:	90 91 b1 01 	lds	r25, 0x01B1
    25be:	69 2f       	mov	r22, r25
    25c0:	0e 94 e5 12 	call	0x25ca	; 0x25ca <DcMotor_Rotate>
}
    25c4:	cf 91       	pop	r28
    25c6:	df 91       	pop	r29
    25c8:	08 95       	ret

000025ca <DcMotor_Rotate>:

/* This function will rotate the motor with a direction and speed which are passed to it as inputs*/
/* The states are: stop, clockwise (CW), and anti-clockwise (A_CW), A_CW will not be used in our application */
void DcMotor_Rotate(DcMotor_State_t state, DcMotor_Speed_t speed)
{
    25ca:	df 93       	push	r29
    25cc:	cf 93       	push	r28
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <DcMotor_Rotate+0x6>
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <DcMotor_Rotate+0x8>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	89 83       	std	Y+1, r24	; 0x01
    25d8:	6a 83       	std	Y+2, r22	; 0x02
	/* check if current state was changed that that stored in the global variable */
	if (state != motor_state)
    25da:	90 91 b0 01 	lds	r25, 0x01B0
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	89 17       	cp	r24, r25
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <DcMotor_Rotate+0x1c>
    25e4:	42 c0       	rjmp	.+132    	; 0x266a <DcMotor_Rotate+0xa0>
	{
		/* Now the motor state changed, so lets check to which state exactly */
		switch(state)
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	28 2f       	mov	r18, r24
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	3c 83       	std	Y+4, r19	; 0x04
    25ee:	2b 83       	std	Y+3, r18	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	91 05       	cpc	r25, r1
    25f8:	31 f0       	breq	.+12     	; 0x2606 <DcMotor_Rotate+0x3c>
    25fa:	2b 81       	ldd	r18, Y+3	; 0x03
    25fc:	3c 81       	ldd	r19, Y+4	; 0x04
    25fe:	22 30       	cpi	r18, 0x02	; 2
    2600:	31 05       	cpc	r19, r1
    2602:	91 f0       	breq	.+36     	; 0x2628 <DcMotor_Rotate+0x5e>
    2604:	22 c0       	rjmp	.+68     	; 0x264a <DcMotor_Rotate+0x80>
		{
			case MOTOR_CW:
			{
				/* start PWM with the given speed */
				Timer0_PWM_Init(speed);
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	0e 94 3f 13 	call	0x267e	; 0x267e <Timer0_PWM_Init>

				/* Rotate the motor CW */
				GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	64 e0       	ldi	r22, 0x04	; 4
    2610:	41 e0       	ldi	r20, 0x01	; 1
    2612:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_LOW);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	65 e0       	ldi	r22, 0x05	; 5
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_CW;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	80 93 b0 01 	sts	0x01B0, r24
    2626:	24 c0       	rjmp	.+72     	; 0x2670 <DcMotor_Rotate+0xa6>
			}

			case MOTOR_A_CW:
			{
				/* start PWM with the given speed */
				Timer0_PWM_Init(speed);
    2628:	8a 81       	ldd	r24, Y+2	; 0x02
    262a:	0e 94 3f 13 	call	0x267e	; 0x267e <Timer0_PWM_Init>

				/* Rotate the motor A-CW */
				GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	64 e0       	ldi	r22, 0x04	; 4
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_HIGH);
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	65 e0       	ldi	r22, 0x05	; 5
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_A_CW;
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	80 93 b0 01 	sts	0x01B0, r24
    2648:	13 c0       	rjmp	.+38     	; 0x2670 <DcMotor_Rotate+0xa6>
			default:

			case MOTOR_STOP:
			{
				/* stop the PWM and the EN1 */
				Timer0_PWM_Init(STOP);
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0e 94 3f 13 	call	0x267e	; 0x267e <Timer0_PWM_Init>
				/* Stop the motor by applying HIGH on both of its INs
				 * Note:	Applying LOW works too! but HIGH is better to
				 * 			be not care to any noise signals may occur */
				GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>
				GPIO_writePin(PORTB_ID, PIN5_ID, LOGIC_HIGH);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	65 e0       	ldi	r22, 0x05	; 5
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 b4 08 	call	0x1168	; 0x1168 <GPIO_writePin>

				/* Change the current state of the global variable */
				motor_state = MOTOR_STOP;
    2664:	10 92 b0 01 	sts	0x01B0, r1
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <DcMotor_Rotate+0xa6>
		}
	}
	/* if the state not changed, keep rotating the motor with the required speed */
	else
	{
		Timer0_PWM_Init(speed);
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	0e 94 3f 13 	call	0x267e	; 0x267e <Timer0_PWM_Init>
	}
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    267e:	0f 93       	push	r16
    2680:	1f 93       	push	r17
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	0f 92       	push	r0
    2688:	cd b7       	in	r28, 0x3d	; 61
    268a:	de b7       	in	r29, 0x3e	; 62
    268c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = ZERO; // Set Timer Initial Value to 0
    268e:	e2 e5       	ldi	r30, 0x52	; 82
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle * SCALER_TO_255; //Set Compare value using percentage as ratio
    2694:	0c e5       	ldi	r16, 0x5C	; 92
    2696:	10 e0       	ldi	r17, 0x00	; 0
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	aa 27       	eor	r26, r26
    26a0:	97 fd       	sbrc	r25, 7
    26a2:	a0 95       	com	r26
    26a4:	ba 2f       	mov	r27, r26
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	23 e3       	ldi	r18, 0x33	; 51
    26b8:	33 e3       	ldi	r19, 0x33	; 51
    26ba:	43 e2       	ldi	r20, 0x23	; 35
    26bc:	50 e4       	ldi	r21, 0x40	; 64
    26be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	bc 01       	movw	r22, r24
    26c8:	cd 01       	movw	r24, r26
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	f8 01       	movw	r30, r16
    26d4:	80 83       	st	Z, r24

	GPIO_setupPinDirection(PORTB_ID,PIN3_ID,PIN_OUTPUT);; // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	63 e0       	ldi	r22, 0x03	; 3
    26da:	41 e0       	ldi	r20, 0x01	; 1
    26dc:	0e 94 c9 07 	call	0xf92	; 0xf92 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    26e0:	e3 e5       	ldi	r30, 0x53	; 83
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	8a e6       	ldi	r24, 0x6A	; 106
    26e6:	80 83       	st	Z, r24
}
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	08 95       	ret

000026f4 <__mulsi3>:
    26f4:	62 9f       	mul	r22, r18
    26f6:	d0 01       	movw	r26, r0
    26f8:	73 9f       	mul	r23, r19
    26fa:	f0 01       	movw	r30, r0
    26fc:	82 9f       	mul	r24, r18
    26fe:	e0 0d       	add	r30, r0
    2700:	f1 1d       	adc	r31, r1
    2702:	64 9f       	mul	r22, r20
    2704:	e0 0d       	add	r30, r0
    2706:	f1 1d       	adc	r31, r1
    2708:	92 9f       	mul	r25, r18
    270a:	f0 0d       	add	r31, r0
    270c:	83 9f       	mul	r24, r19
    270e:	f0 0d       	add	r31, r0
    2710:	74 9f       	mul	r23, r20
    2712:	f0 0d       	add	r31, r0
    2714:	65 9f       	mul	r22, r21
    2716:	f0 0d       	add	r31, r0
    2718:	99 27       	eor	r25, r25
    271a:	72 9f       	mul	r23, r18
    271c:	b0 0d       	add	r27, r0
    271e:	e1 1d       	adc	r30, r1
    2720:	f9 1f       	adc	r31, r25
    2722:	63 9f       	mul	r22, r19
    2724:	b0 0d       	add	r27, r0
    2726:	e1 1d       	adc	r30, r1
    2728:	f9 1f       	adc	r31, r25
    272a:	bd 01       	movw	r22, r26
    272c:	cf 01       	movw	r24, r30
    272e:	11 24       	eor	r1, r1
    2730:	08 95       	ret

00002732 <__prologue_saves__>:
    2732:	2f 92       	push	r2
    2734:	3f 92       	push	r3
    2736:	4f 92       	push	r4
    2738:	5f 92       	push	r5
    273a:	6f 92       	push	r6
    273c:	7f 92       	push	r7
    273e:	8f 92       	push	r8
    2740:	9f 92       	push	r9
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	ca 1b       	sub	r28, r26
    275c:	db 0b       	sbc	r29, r27
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	f8 94       	cli
    2762:	de bf       	out	0x3e, r29	; 62
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	cd bf       	out	0x3d, r28	; 61
    2768:	09 94       	ijmp

0000276a <__epilogue_restores__>:
    276a:	2a 88       	ldd	r2, Y+18	; 0x12
    276c:	39 88       	ldd	r3, Y+17	; 0x11
    276e:	48 88       	ldd	r4, Y+16	; 0x10
    2770:	5f 84       	ldd	r5, Y+15	; 0x0f
    2772:	6e 84       	ldd	r6, Y+14	; 0x0e
    2774:	7d 84       	ldd	r7, Y+13	; 0x0d
    2776:	8c 84       	ldd	r8, Y+12	; 0x0c
    2778:	9b 84       	ldd	r9, Y+11	; 0x0b
    277a:	aa 84       	ldd	r10, Y+10	; 0x0a
    277c:	b9 84       	ldd	r11, Y+9	; 0x09
    277e:	c8 84       	ldd	r12, Y+8	; 0x08
    2780:	df 80       	ldd	r13, Y+7	; 0x07
    2782:	ee 80       	ldd	r14, Y+6	; 0x06
    2784:	fd 80       	ldd	r15, Y+5	; 0x05
    2786:	0c 81       	ldd	r16, Y+4	; 0x04
    2788:	1b 81       	ldd	r17, Y+3	; 0x03
    278a:	aa 81       	ldd	r26, Y+2	; 0x02
    278c:	b9 81       	ldd	r27, Y+1	; 0x01
    278e:	ce 0f       	add	r28, r30
    2790:	d1 1d       	adc	r29, r1
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	ed 01       	movw	r28, r26
    279e:	08 95       	ret

000027a0 <itoa>:
    27a0:	fb 01       	movw	r30, r22
    27a2:	9f 01       	movw	r18, r30
    27a4:	e8 94       	clt
    27a6:	42 30       	cpi	r20, 0x02	; 2
    27a8:	c4 f0       	brlt	.+48     	; 0x27da <itoa+0x3a>
    27aa:	45 32       	cpi	r20, 0x25	; 37
    27ac:	b4 f4       	brge	.+44     	; 0x27da <itoa+0x3a>
    27ae:	4a 30       	cpi	r20, 0x0A	; 10
    27b0:	29 f4       	brne	.+10     	; 0x27bc <itoa+0x1c>
    27b2:	97 fb       	bst	r25, 7
    27b4:	1e f4       	brtc	.+6      	; 0x27bc <itoa+0x1c>
    27b6:	90 95       	com	r25
    27b8:	81 95       	neg	r24
    27ba:	9f 4f       	sbci	r25, 0xFF	; 255
    27bc:	64 2f       	mov	r22, r20
    27be:	77 27       	eor	r23, r23
    27c0:	0e 94 01 14 	call	0x2802	; 0x2802 <__udivmodhi4>
    27c4:	80 5d       	subi	r24, 0xD0	; 208
    27c6:	8a 33       	cpi	r24, 0x3A	; 58
    27c8:	0c f0       	brlt	.+2      	; 0x27cc <itoa+0x2c>
    27ca:	89 5d       	subi	r24, 0xD9	; 217
    27cc:	81 93       	st	Z+, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	a1 f7       	brne	.-24     	; 0x27bc <itoa+0x1c>
    27d4:	16 f4       	brtc	.+4      	; 0x27da <itoa+0x3a>
    27d6:	5d e2       	ldi	r21, 0x2D	; 45
    27d8:	51 93       	st	Z+, r21
    27da:	10 82       	st	Z, r1
    27dc:	c9 01       	movw	r24, r18
    27de:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <strrev>

000027e2 <strrev>:
    27e2:	dc 01       	movw	r26, r24
    27e4:	fc 01       	movw	r30, r24
    27e6:	67 2f       	mov	r22, r23
    27e8:	71 91       	ld	r23, Z+
    27ea:	77 23       	and	r23, r23
    27ec:	e1 f7       	brne	.-8      	; 0x27e6 <strrev+0x4>
    27ee:	32 97       	sbiw	r30, 0x02	; 2
    27f0:	04 c0       	rjmp	.+8      	; 0x27fa <strrev+0x18>
    27f2:	7c 91       	ld	r23, X
    27f4:	6d 93       	st	X+, r22
    27f6:	70 83       	st	Z, r23
    27f8:	62 91       	ld	r22, -Z
    27fa:	ae 17       	cp	r26, r30
    27fc:	bf 07       	cpc	r27, r31
    27fe:	c8 f3       	brcs	.-14     	; 0x27f2 <strrev+0x10>
    2800:	08 95       	ret

00002802 <__udivmodhi4>:
    2802:	aa 1b       	sub	r26, r26
    2804:	bb 1b       	sub	r27, r27
    2806:	51 e1       	ldi	r21, 0x11	; 17
    2808:	07 c0       	rjmp	.+14     	; 0x2818 <__udivmodhi4_ep>

0000280a <__udivmodhi4_loop>:
    280a:	aa 1f       	adc	r26, r26
    280c:	bb 1f       	adc	r27, r27
    280e:	a6 17       	cp	r26, r22
    2810:	b7 07       	cpc	r27, r23
    2812:	10 f0       	brcs	.+4      	; 0x2818 <__udivmodhi4_ep>
    2814:	a6 1b       	sub	r26, r22
    2816:	b7 0b       	sbc	r27, r23

00002818 <__udivmodhi4_ep>:
    2818:	88 1f       	adc	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	5a 95       	dec	r21
    281e:	a9 f7       	brne	.-22     	; 0x280a <__udivmodhi4_loop>
    2820:	80 95       	com	r24
    2822:	90 95       	com	r25
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	08 95       	ret

0000282a <_exit>:
    282a:	f8 94       	cli

0000282c <__stop_program>:
    282c:	ff cf       	rjmp	.-2      	; 0x282c <__stop_program>
